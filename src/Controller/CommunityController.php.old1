<?php

namespace App\Controller;

use App\Entity\ForumPost;
use App\Form\CommentType;
use App\Entity\ForumComment;
use App\Form\ForumPostType;
use App\Form\ForumCommentType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\ORM\EntityManagerInterface;

class CommunityController extends AbstractController
{
    private $entityManager;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    #[Route('/communaute', name: 'app_community')]
    public function index(): Response
    {
        $posts = $this->entityManager->getRepository(ForumPost::class)->findAll();

        return $this->render('community/index.html.twig', [
            'posts' => $posts,
        ]);
    }

   // ...

/**
 * @Route("/create-comment/{id}", name="app_forum_create_comment")
 */
public function createComment(Request $request, ForumPost $post): Response
{
    $comment = new ForumComment();
    $comment->setUser($this->getUser());
    $comment->setCreatedAt(new \DateTimeImmutable());

    $form = $this->createForm(CommentType::class, $comment);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {

        // Внесем изменения в сохранение комментария
        $comment->setPost($post); // Установим связь с постом перед сохранением
        $post->addComment($comment);


    // Проверим валидность формы
    dump($form->getErrors(true, true)); // Добавим этот код

    $this->entityManager->persist($comment);
    $this->entityManager->flush();


 // Добавим дополнительные проверки
 dump($comment->getText()); // Проверим текст комментария
 dump($comment->getUser()); // Проверим пользователя

 $this->entityManager->persist($comment);
 $this->entityManager->flush();    // Сбросим форму после успешного сохранения
 
        $form = $this->createForm(CommentType::class, new ForumComment());

        // Возвращаем на страницу с подробностями поста
        return $this->redirectToRoute('app_forum_show_post_details', ['id' => $post->getId()]);
    }

    return $this->render('community/show_post_details.html.twig', [
        'post' => $post,
        'comments' => $post->getComments(),
        'form' => $form->createView(),
    ]);
}

#[Route('/create-post', name: 'create_post')]
public function createPost(Request $request, EntityManagerInterface $entityManager): Response
{
    $form = $this->createForm(ForumPostType::class);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        // Création d'une nouvelle instance de ForumPost
        $forumPost = new ForumPost();

        // Attribution des valeurs du formulaire à l'entité
        $forumPost->setTitle($form->get('title')->getData());
        $forumPost->setText($form->get('text')->getData());
        $forumPost->setSummary($form->get('summary')->getData());

        // Obtention de l'utilisateur actuel (supposons que votre entité ForumPost a une relation avec User)
        $user = $this->getUser();
        $forumPost->setUser($user);

        // Définition de la date de création
        $forumPost->setCreatedAt(new \DateTimeImmutable());

        // Utilisation de la variable $entityManager
        $entityManager->persist($forumPost);
        $entityManager->flush();

        return $this->redirectToRoute('app_community');
    }

    return $this->render('community/create_post.html.twig', [
        'form' => $form->createView(),
    ]);
}

// ...


/**
 * @Route("/show-post/{id}", name="app_forum_show_post_details")
 */
public function showPostDetails(ForumPost $post): Response
{
    $comments = $post->getComments();

    $comment = new ForumComment();
    $form = $this->createForm(CommentType::class, $comment);

    return $this->render('community/show_post_details.html.twig', [
        'post' => $post,
        'comments' => $comments,
        'form' => $form->createView(),
    ]);
}
/*public function showPostDetails($id, Request $request)
    {
        // Récupérer le post
        $post = $this->getDoctrine()->getRepository(ForumPost::class)->find($id);

        // ... (autres parties du code)

        // Afficher la page avec le post et les commentaires
        return $this->render('community/show_post_details.html.twig', [
            'post' => $post,
            'form' => $form->createView(),
        ]);
    }
*/
// public function showPostDetails($id, Request $request)
// {
//     // Récupérer le post
//     $post = $this->entityManager->getRepository(ForumPost::class)->find($id);

//     // Créer une nouvelle instance de ForumComment liée au post actuel et à l'utilisateur actuel
//     $comment = new ForumComment();
//     $comment->setPost($post);

//     // Récupérer l'utilisateur actuellement connecté (assurez-vous que la sécurité est configurée)
//     $user = $this->getUser();
//     $comment->setUser($user);

//     // Créer le formulaire
//     $form = $this->createForm(ForumCommentType::class, $comment);

//     // Gérer la soumission du formulaire
//     $form->handleRequest($request);

//     if ($form->isSubmitted() && $form->isValid()) {
//         // Enregistrer le commentaire dans la base de données
//         $comment->setCreatedAt(new \DateTimeImmutable());
//         $this->entityManager->persist($comment);
//         $this->entityManager->flush();

//         // Rediriger ou effectuer d'autres actions après l'ajout du commentaire
//     }

//     // Afficher la page avec le post et les commentaires
//     return $this->render('community/show_post_details.html.twig', [
//         'post' => $post,
//         'form' => $form->createView(),
//     ]);
// }

public function showPost($id, Request $request)
    {
        // Récupérer le post
        $post = $this->entityManager->getRepository(ForumPost::class)->find($id);

        // Créer une nouvelle instance de ForumComment liée au post actuel et à l'utilisateur actuel
        $comment = new ForumComment();
        $comment->setPost($post);

        // Récupérer l'utilisateur actuellement connecté (assurez-vous que la sécurité est configurée)
        $user = $this->getUser();
        $comment->setUser($user);

        // Créer le formulaire
        $form = $this->createForm(ForumCommentType::class, $comment);

        // Gérer la soumission du formulaire
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Enregistrer le commentaire dans la base de données
            $comment->setCreatedAt(new \DateTimeImmutable());
            $this->entityManager->persist($comment);
            $this->entityManager->flush();

            // Rediriger ou effectuer d'autres actions après l'ajout du commentaire
        }

        // Afficher la page avec le post et les commentaires
        return $this->render('community/show_post.html.twig', [
            'post' => $post,
            'form' => $form->createView(),
        ]);
    }

}
